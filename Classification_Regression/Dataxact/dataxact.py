# -*- coding: utf-8 -*-
"""DataXact.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/shravan-18/Machine-Learning-Projects/blob/main/Classification_Regression/Dataxact/DataXact.ipynb

# **Hackathon - DataXact - Conducted by Data Science Club, VIT Chennai**
"""

import numpy as np
import pandas as pd

df1=pd.read_csv(r'C:\\VIT Material\\VIT material\\csv\Book1.csv')
df2=pd.read_csv(r'C:\\VIT Material\\VIT material\\csv\Book3.csv')
df3=pd.read_csv(r'C:\\VIT Material\\VIT material\\csv\Book5.csv')
df4=pd.read_csv(r'C:\\VIT Material\\VIT material\\csv\Book(i4).csv')
df5=pd.read_csv(r'C:\\VIT Material\\VIT material\\csv\Book(i48).csv')

df1.head()

df2.head()

df3.head()

df4.head()

df5.head()

print(df1.shape)
print(df2.shape)
print(df3.shape)
print(df4.shape)
print(df5.shape)

dataset = pd.concat([df4, df3.drop(['R13 (MOhm)', 'R14 (MOhm)'], axis=1),df5.drop(['Flow rate (mL/min)', 'Heater voltage (V)'], axis=1), df1.drop(['R13 (MOhm)', 'R14 (MOhm)'], axis=1), df2, df3.drop(['Flow rate (mL/min)', 'Heater voltage (V)'], axis=1)], axis=1)

dataset.head()

print(dataset.shape)
print(dataset.isnull().sum())

import matplotlib.pyplot as plt
import seaborn as sns

# Calculate the correlation matrix
correlation_matrix = dataset.corr()

# Plot the correlation heatmap
plt.figure(figsize=(17, 13))
sns.heatmap(correlation_matrix, cmap='coolwarm',  annot=True)
plt.title('Correlation Heatmap')
plt.tight_layout()
plt.show()

# Set the threshold for correlation
threshold = 0.9

# Find highly correlated columns

highly_correlated_cols = set()
cols = correlation_matrix.columns

for i in range(len(cols)):
    for j in range(i):
        if correlation_matrix.iloc[i, j] >= threshold:
            colname = correlation_matrix.columns[i]
            highly_correlated_cols.add(colname)

# Drop highly correlated columns
dataset = dataset.drop(columns=highly_correlated_cols)

# Print the resulting dataframe
dataset.head()

dataset.describe()

dataset['Time (s)'] = dataset['Time (s)'].fillna(dataset['Time (s)'].mean())

dataset['CO (ppm)'] = dataset['CO (ppm)'].fillna(dataset['CO (ppm)'].median())
dataset['Humidity (%r.h.)'] = dataset['Humidity (%r.h.)'].fillna(dataset['Humidity (%r.h.)'].mean())
dataset['Temperature (C)'] = dataset['Temperature (C)'].fillna(dataset['Temperature (C)'].mean())
dataset['Flow rate (mL/min)'] = dataset['Flow rate (mL/min)'].fillna(dataset['Flow rate (mL/min)'].mean())
dataset['Heater voltage (V)'] = dataset['Heater voltage (V)'].fillna(dataset['Heater voltage (V)'].median())
dataset['R1 (MOhm)'] = dataset['R1 (MOhm)'].fillna(dataset['R1 (MOhm)'].median())
dataset['R4 (MOhm)'] = dataset['R4 (MOhm)'].fillna(dataset['R4 (MOhm)'].mean())
dataset['R8 (MOhm)'] = dataset['R8 (MOhm)'].fillna(dataset['R8 (MOhm)'].mean())

dataset.isnull().sum()

c=1
plt.figure(figsize=(12, 10))

for i in dataset.columns:
    ax = plt.subplot(3, 3,c)
    c += 1
    sns.boxplot(data = dataset, y=i)

def outliers(val):

    if val>(q3+threshold):
        return q3
    elif val<(q1-threshold):
        return q1

    return val

for i in dataset.columns[3:]:

    q3 = dataset[i].describe()['75%']
    q1 = dataset[i].describe()['25%']

    iqr = q3-q1
    threshold = iqr*1.5
    dataset[i] = dataset[i].apply(outliers)

c=1
plt.figure(figsize=(12, 10))

for i in dataset.columns:
    ax = plt.subplot(3, 3,c)
    c += 1
    sns.boxplot(data = dataset, y=i)

dataset = dataset.drop_duplicates()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

X = dataset.drop('CO (ppm)', axis=1)
y = dataset['CO (ppm)']

scaler = MinMaxScaler()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

'''import tensorflow as tf
from keras.layers import Dense
from keras.layers import Dropout
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.preprocessing import MinMaxScaler


# Build the ANN model
model = tf.keras.models.Sequential()
model.add(Dense(64, activation='relu', input_dim=X_train.shape[1]))
model.add(Dense(32, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(16, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation = 'sigmoid'))

Optimizer = tf.keras.optimizers.Adam(learning_rate = 0.05)

# Compile the model
model.compile(loss='mean_squared_error', optimizer=Optimizer)

# Train the model
model.fit(X_train, y_train, epochs=6, batch_size=32, verbose=1)

# Evaluate the model on the testing set
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print("R2 score: ", r2)
print("Mean Squared Error: ", mse)'''

import xgboost as xgb
from sklearn.metrics import r2_score, mean_squared_error

# Set the parameters for XGBoost
params = {
    'objective': 'reg:squarederror',
    'max_depth': 9,
    'learning_rate': 0.1,
    'n_estimators': 850,
    'reg_lambda': 0.001,
    'reg_alpha': 0.1
}

# Train the XGBoost model
model = xgb.XGBRegressor(**params)
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Calculate the R2 score
r2 = r2_score(y_test, y_pred)
print('R2 Score:', r2)

mse = mean_squared_error(y_test, y_pred)
print('MSE:', mse)

# Predicting data using training data to see how the model performs...

'''
p2 = model.predict(X_train)
r = r2_score(y_train, p2)
print("R2 score: ", r)

ms = mean_squared_error(y_train, p2)
print('MSE:', ms)
'''

# Trying out how the regularization parameters work in XGBoost...


'''# Set the parameters for XGBoost
params_1 = {
    'objective': 'reg:squarederror',
    'max_depth': 5,
    'learning_rate': 0.05,
    'n_estimators': 420,
    'reg_alpha': 0.1,  # L1 regularization parameter
    'reg_lambda': 0.0005  # L2 regularization parameter
}

# Train the XGBoost model
model_1 = xgb.XGBRegressor(**params_1)
model_1.fit(X_train, y_train)

# Make predictions on the testing set
y_pred_1 = model_1.predict(X_test)

# Calculate the R2 score
r2_1 = r2_score(y_test, y_pred_1)
print('R2 Score:', r2_1)

mse_1 = mean_squared_error(y_test, y_pred_1)
print('MSE:', mse_1)
'''

#Predicting final output...

test_data = pd.read_csv(r'C:\\VIT Material\\VIT material\\csv\\testing set.csv')
test_data.head()

test_data = test_data.drop(['R2 (MOhm)','R3 (MOhm)','R5 (MOhm)','R6 (MOhm)','R7 (MOhm)','R9 (MOhm)','R10 (MOhm)','R11 (MOhm)','R12 (MOhm)','R13 (MOhm)', 'R14 (MOhm)'], axis=1)

test_data.head()

dataset.head()

test_data.isnull().sum()

test_data.describe()

test_data['Flow rate (mL/min)'] = test_data['Flow rate (mL/min)'].fillna(test_data['Flow rate (mL/min)'].mean())
test_data['Temperature (C)'] = test_data['Temperature (C)'].fillna(test_data['Temperature (C)'].mean())
test_data['R1 (MOhm)'] = test_data['R1 (MOhm)'].fillna(test_data['R1 (MOhm)'].median())
test_data['Heater voltage (V)'] = test_data['Heater voltage (V)'].fillna(test_data['Heater voltage (V)'].median())
test_data['R8 (MOhm)'] = test_data['R8 (MOhm)'].fillna(test_data['R8 (MOhm)'].mean())

test_data['Humidity (%r.h.)'] = test_data['Humidity (%r.h.)'].fillna(test_data['Humidity (%r.h.)'].mean())
test_data['R4 (MOhm)'] = test_data['R4 (MOhm)'].fillna(test_data['R4 (MOhm)'].mean())
test_data['Time (s)'] = test_data['Time (s)'].fillna(test_data['Time (s)'].mean())

test_data.isnull().sum()

c=1
plt.figure(figsize=(12, 10))

for i in test_data.columns:
    ax = plt.subplot(3, 3,c)
    c += 1
    sns.boxplot(data = test_data, y=i)

def outliers(val):

    if val>(q3+threshold):
        return q3
    elif val<(q1-threshold):
        return q1

    return val

for i in test_data.columns[2:]:

    q3 = test_data[i].describe()['75%']
    q1 = test_data[i].describe()['25%']

    iqr = q3-q1
    threshold = iqr*1.5
    test_data[i] = test_data[i].apply(outliers)

c=1
plt.figure(figsize=(12, 10))

for i in test_data.columns:
    ax = plt.subplot(3, 3,c)
    c += 1
    sns.boxplot(data = test_data, y=i)

test_data = scaler.fit_transform(test_data)

test_pred = model.predict(test_data)

test_pred[test_pred < 0] = 0

plt.hist(test_pred, bins=10)
plt.show()

np.savetxt(r'C:\\VIT Material\\VIT material\\csv\\output.csv', test_pred, delimiter=',')